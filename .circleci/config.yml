version: 2
jobs:
  test:
    parallelism: 4
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - run:
          name: "Prepare host for installation"
          command: |
            sudo killall apt-get || true
            for service in apt-daily.service apt-daily-upgrade.service unattended-upgrades.service apt-daily.timer apt-daily-upgrade.timer; do
              sudo systemctl stop ${service}
              sudo systemctl kill --kill-who=all ${service} || true
              sudo systemctl disable ${service}
              sudo systemctl mask ${service}
            done
            sudo systemctl daemon-reload
      - run:
          name: "Install required packages"
          command: |
            source /etc/os-release
            sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
            wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_${VERSION_ID}/Release.key -O- | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install libkrb5-dev software-properties-common containerd runc podman docker.io
            sudo sed -i -E 's/(unqualified-search-registries = [[])(.*)/\1"registry.fedoraproject.org", "registry.access.redhat.com", \2/g' /etc/containers/registries.conf
            # https://bugs.launchpad.net/ubuntu/+source/docker.io/+bug/1844894
            sudo systemctl unmask docker
            sudo systemctl start docker
            echo 'export PATH=~/.local/bin:$PATH' >> $BASH_ENV
            mkdir -p $HOME/.local/bin
            cd ~/.local/bin && curl -L https://github.com/openshift/source-to-image/releases/download/v1.1.13/source-to-image-v1.1.13-b54d75d3-linux-amd64.tar.gz | tar xvz
      - checkout
      - run:
          name: "Versions"
          command: |
            docker version
            docker info
            podman version
            podman info
      - run:
          name: "Install required Python versions/packages"
          command: |
            pyenv uninstall -f 2.7.18
            pyenv install 3.6.10
            pyenv install 3.7.7
            pyenv install 3.10.0
            pyenv local 3.6.10 3.7.7 3.10.0
            pip install tox
      - run: git config --global user.email "ci@dummy.com" && git config --global user.name "John Doe"
      - run: |
          if [[ "${CIRCLE_NODE_INDEX}" == 1 ]]; then
             make test-py36
          fi
      - run: |
          if [[ "${CIRCLE_NODE_INDEX}" == 2 ]]; then
             make test-py37
          fi
      - run: |
          if [[ "${CIRCLE_NODE_INDEX}" == 3 ]]; then
             make test-py310
          fi

  docs-build:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - run:
          name: "Prepare host for installation"
          command: |
            sudo killall apt-get || true
            for service in apt-daily.service apt-daily-upgrade.service unattended-upgrades.service apt-daily.timer apt-daily-upgrade.timer; do
              sudo systemctl stop ${service}
              sudo systemctl kill --kill-who=all ${service} || true
              sudo systemctl disable ${service}
              sudo systemctl mask ${service}
            done
            sudo systemctl daemon-reload
      - run:
          name: "Install required packages"
          command: |
            sudo apt-get update
            sudo apt install -y graphviz libkrb5-dev
      - checkout
      - run:
          name: "Install required Python versions/packages"
          command: |
            pyenv uninstall -f 2.7.18
            pyenv install 3.10.0
            pyenv local 3.10.0
            pip install virtualenv
      - run:
          name: Install docs dependencies
          command: |
            cd docs
            mkdir -p ./venv
            virtualenv ./venv
            . venv/bin/activate
            pip install -r ../requirements.txt -r requirements.txt
      - run:
          name: Generate documentation
          command: |
            cd docs
            . venv/bin/activate
            make html
      - store_artifacts:
          path: docs/_build

workflows:
  version: 2
  build:
    jobs:
      - test
      - docs-build
