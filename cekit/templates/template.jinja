{% macro repo_create(pkg_manager, repositories) -%}
    {% if pkg_manager in helper.SUPPORTED_PACKAGE_MANAGERS %}
        {% for repo in repositories %}
repos/{{ repo.filename }} \
        {% endfor %}
    /etc/yum.repos.d/
    {% endif %}
{%- endmacro %}
{% macro repo_remove(pkg_manager, repositories) -%}
    {% if pkg_manager in helper.SUPPORTED_PACKAGE_MANAGERS %}
rm{% for repo in repositories %} /etc/yum.repos.d/{{ repo.filename }}{% endfor %}
    {% endif %}
{%- endmacro %}
{% macro repo_install(pkg_manager, rpm) -%}
    {% if pkg_manager in helper.SUPPORTED_PACKAGE_MANAGERS %}
{{ pkg_manager }} --setopt=tsflags=nodocs install -y {{ rpm }}
    {% endif %}
{%- endmacro %}
{% macro pkg_install(pkg_manager, packages) -%}
    {% if pkg_manager in helper.SUPPORTED_PACKAGE_MANAGERS %}
{{ pkg_manager }} --setopt=tsflags=nodocs install -y {%- for package in packages %} {{ package }}{% endfor %} \
    {% if pkg_manager == 'microdnf' %}
    && {{ pkg_manager }} clean all \
    {% endif %}
    && rpm -q{% for package in packages %} {{ package }}{% endfor %}
    {% endif %}
{%- endmacro %}
{% macro repo_clear_cache(pkg_manager) -%}
    {% if pkg_manager in helper.SUPPORTED_PACKAGE_MANAGERS %}
{{ pkg_manager }} clean all && [ ! -d /var/cache/yum ] || rm -rf /var/cache/yum
    {% endif %}
{%- endmacro %}
{%- macro process_image(image) %}
{{ process_module(image, image=true) }}
{%- endmacro %}
{% macro process_module(module, image=false) %}
# START module {{ module.name }}:{{ module.version }}

{% if module.artifacts|length > 0 %}
# Copy module {{ module.name }} artifacts
COPY \
{% for artifact in module.artifacts %}
    {{ artifact['target'] }} \
    {% endfor %}
    /tmp/artifacts/
{% endif %}

{%- if not image %}
# Copy module {{ module.name }} content
COPY modules/{{ module.name }} /tmp/scripts/{{ module.name }}
{% endif %}

{% if module.packages and module.packages.install %}
USER root

RUN {{ pkg_install(packages.manager, module.packages.install) }}
{% endif %}
{% if helper.envs(module.envs)|length > 0 %}

# Environment variables
ENV \
    {% for env in helper.envs(module.envs)|sort(attribute='name') %}
    {{ env.name }}="{{ env.value }}" {% if loop.index < loop.length %}\{% endif %}

    {% endfor %}
{% endif %}
{% if module.labels|length > 0 %}

# Labels
LABEL \
      {% for label in module.labels|sort(attribute='name') %}
      {{ label.name }}="{{ label.value }}" {% if loop.index < loop.length %} \{% endif %}

      {% endfor %}
{% endif %}
{% if helper.ports(module.ports)|length > 0 %}

# Exposed ports
EXPOSE {%- for port in helper.ports(module.ports) %} {{ port }}{% endfor %}
{% endif %}
{%- if module.execute|length > 0 %}

# Custom scripts
{% for exec in module.execute %}
USER {{ exec.user }}
RUN [ "bash", "-x", "/tmp/scripts/{{ exec.directory }}/{{ exec.script }}" ]
{% endfor %}
{% endif %}
{%- if module.volumes|length > 0 %}

# Volumes
{% for volume in module.volumes %}
VOLUME ["{{ volume['path'] }}"]
{% endfor %}
{% endif %}

# END module {{ module.name }}:{{ module.version }}
{%- endmacro %}

# Copyright 2019 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ------------------------------------------------------------------------
#
# This is a Dockerfile for the {{ name }}:{{ version }} image.

FROM {{ from }}

USER root
{% if packages.repositories_injected %}

# Add custom repo files
COPY {{ repo_create(packages.manager, packages.repositories_injected) }}
{% endif %}
{% if packages.repositories %}
{% for repo in packages.repositories %}
{% if repo.present and repo.rpm %}

RUN {{ repo_install(packages.manager, repo.rpm) }}
{% endif %}
{% endfor %}
{% endif %}

{% for to_install in image.modules.install %}
{{ process_module(helper.module(to_install)) }}
{% endfor %}
{{ process_image(image) }}

USER root
RUN [ ! -d /tmp/scripts ] || rm -rf /tmp/scripts
RUN [ ! -d /tmp/artifacts ] || rm -rf /tmp/artifacts

{% if helper.packages_to_install(image) %}
# Clear package manager metadata
RUN {{ repo_clear_cache(packages.manager) }}
{% endif %}

{% if packages.repositories_injected %}
# Remove custom repo files
RUN {{ repo_remove(packages.manager, packages.repositories_injected) }}
{% endif %}

# Run user
USER {{ run['user'] }}
{% if 'workdir' in run %}

# Specify the working directory
WORKDIR {{ run['workdir'] }}
{% endif %}
{% if 'entrypoint' in run %}

# Specify entrypoint
ENTRYPOINT {{ helper.cmd(run['entrypoint']) }}
{% endif %}
{% if 'cmd' in run %}

# Specify run cmd
CMD {{ helper.cmd(run['cmd']) }}
{% endif %}
{% if image.help.add %}

ADD help.md /
{% endif %}
